server {
  listen 80 default_server;
  listen [::]:80;
  server_name  _;


  if ($request_method = HEAD ) {
    return 200;
  }

  location /auth {
    internal;
    # extract the token for authorizing requests
    if ($request_uri ~* "token=(.*)(&|/)?" ) {
      set $token $1;
    }
    proxy_pass http://auth:8080/auth;
    proxy_pass_request_headers on;
    proxy_pass_header Set-Cookie;
    proxy_pass_header Cookie;
    proxy_pass_request_body off;
    proxy_set_header Content-Length: "";
    proxy_set_header Content-Type: text/plain;
    proxy_set_header X-Original-URI $request_uri;
    # set the token header for authorizing requests
    proxy_set_header X-SW-TOKEN $token;

  }

  location /insights {
    return 302 /insights/$is_args$args;
  }

  # no authorization needed, internal kibana routes
  location ~/insights/(api|ui|built_assets|bundles) {
    rewrite ^/insights/(.*) /$1 break;
    proxy_ignore_client_abort on;
    proxy_pass http://kibana:5601;
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Host $http_host;
  }

  # authroize before navigating to kibana
  location /insights/ {
    auth_request /auth;
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;
    rewrite ^/insights/(.*) /$1 break;

    # remove the token param before proxying
    access_by_lua_block {
      local args = ngx.req.get_uri_args()
      args.token = nil
      ngx.req.set_uri_args(args)
    }

    proxy_ignore_client_abort on;
    proxy_pass http://kibana:5601;
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Host $http_host;
    proxy_set_header x-proxy-user robot;
  }

  location / {
    auth_request /auth;
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;
    
    # remove the token param before proxying
    access_by_lua_block {
      local args = ngx.req.get_uri_args()
      args.token = nil
      ngx.req.set_uri_args(args)
    }

    proxy_pass http://elasticsearch:9200;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_intercept_errors on;
    error_page 301 302 307 = @handle_redirect;

  }

  location @handle_redirect {
    set $saved_redirect_location '$upstream_http_location';
    proxy_pass http://sw_proxy:8080$saved_redirect_location;
  }
}